## Cursor Rules: Landing Page Template

These rules guide Cursor when assisting development in this repo. Keep UX consistent, accessible, and production-ready.

### Global
- Prefer Astro + TypeScript + Tailwind conventions already used in this template
- Never use `alert()` for runtime UX; prefer inline feedback components
- Keep accessibility in mind: `aria-live`, focus states, proper semantics, color contrast

### Form UX Rules (Inline confirmation + error + loading state)

- Inline confirmation replaces submit button on success; do not use `alert`
- Inline error appears under the form on failure; keep submit button visible
- Loading state on submit: disable button, show spinner + ‚ÄúSubmitting‚Ä¶‚Äù, set `aria-busy=true`; re-enable on failure
- Accessibility: use `aria-live="polite"` on action container and error container; maintain good contrast
- Styling: success uses `bg-green-100 border border-green-400 text-green-700`; error uses `bg-red-100 border border-red-400 text-red-700`
- IDs and structure: include `registration-action` (wrapping submit) and `registration-error` (hidden by default); submit button id `register-button`
- Server interaction: POST JSON; on non-2xx parse JSON and show generic inline error; log details to console; reset form only on success
- No runtime alerts: do not use `alert()` for form UX

#### Boilerplate snippet (structure and behavior)

```html
<form id="registration-form" class="space-y-10">
  <!-- ...inputs... -->

  <!-- Submit Button / Inline Confirmation Area -->
  <div id="registration-action" class="text-center pt-10" aria-live="polite">
    <button
      id="register-button"
      type="submit"
      class="bg-[#D7000F] text-white px-12 py-6 rounded-lg text-[24px] font-semibold uppercase hover:bg-[#b8323d] transition-colors"
    >
      Register Now
    </button>
  </div>

  <!-- Inline error box (hidden by default) -->
  <div
    id="registration-error"
    class="hidden mt-6 p-4 bg-red-100 border border-red-400 text-red-700 rounded-lg text-[18px] text-center"
    aria-live="polite"
  ></div>
</form>

<script>
  document.getElementById('registration-form')?.addEventListener('submit', async (e) => {
    e.preventDefault();

    const form = e.target;
    const formData = new FormData(form);
    const data = Object.fromEntries(formData.entries());

    const actionContainer = document.getElementById('registration-action');
    const errorContainer = document.getElementById('registration-error');
    const registerButton = document.getElementById('register-button');

    // Clear previous error
    if (errorContainer) {
      errorContainer.textContent = '';
      errorContainer.classList.add('hidden');
    }

    // Loading state
    let originalButtonHTML = null;
    if (registerButton) {
      originalButtonHTML = registerButton.innerHTML;
      registerButton.disabled = true;
      registerButton.classList.add('opacity-60', 'cursor-not-allowed');
      registerButton.setAttribute('aria-busy', 'true');
      registerButton.innerHTML = `
        <span class="inline-flex items-center gap-3">
          <svg class="animate-spin h-6 w-6 text-white" viewBox="0 0 24 24" fill="none">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"></path>
          </svg>
          Submitting...
        </span>
      `;
    }

    try {
      const response = await fetch('/api/signup', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
      });

      if (response.ok) {
        if (actionContainer) {
          actionContainer.setAttribute('aria-live', 'polite');
          actionContainer.innerHTML = `
            <div class="inline-block mt-2 p-4 bg-green-100 border border-green-400 text-green-700 rounded-lg text-[20px] font-semibold">
              üéâ You're in! We'll be in touch soon with details about the run.
            </div>
          `;
        }
        form.reset();
      } else {
        const errorData = await response.json().catch(() => ({}));
        console.error('Server error:', errorData);
        if (errorContainer) {
          errorContainer.textContent = 'Something went wrong. Please try again.';
          errorContainer.classList.remove('hidden');
        }
        if (registerButton && originalButtonHTML !== null) {
          registerButton.disabled = false;
          registerButton.classList.remove('opacity-60', 'cursor-not-allowed');
          registerButton.removeAttribute('aria-busy');
          registerButton.innerHTML = originalButtonHTML;
        }
      }
    } catch (error) {
      console.error('Form submission error:', error);
      if (errorContainer) {
        errorContainer.textContent = 'Something went wrong. Please try again.';
        errorContainer.classList.remove('hidden');
      }
      if (registerButton && originalButtonHTML !== null) {
        registerButton.disabled = false;
        registerButton.classList.remove('opacity-60', 'cursor-not-allowed');
        registerButton.removeAttribute('aria-busy');
        registerButton.innerHTML = originalButtonHTML;
      }
    }
  });
</script>
```

#### Enforcement checklist (apply to all new forms)

- No `alert()` for UX feedback
- Has `registration-action` and `registration-error` containers
- Button `id="register-button"` with loading state support
- Green success replaces button; red error below form
- `aria-live` on action container and error container
- Form reset only on success

# Landing Page Template - Cursor Rules

You are working on a streamlined landing page template for client events. This template uses Astro + TypeScript + Tailwind CSS + PostgreSQL + Resend email service, deployed on Vercel.

## Project Architecture
- **Frontend**: Astro with TypeScript, Tailwind CSS
- **Backend**: Astro API routes with serverless functions
- **Database**: PostgreSQL with connection pooling
- **Email**: Resend service for notifications
- **Deployment**: Vercel with zero-config deployment
- **Authentication**: Simple admin authentication (no complex auth systems)

## Database & Authentication Setup Rules

### Database Setup Checklist
- [ ] Verify DATABASE_URL is properly configured in .env
- [ ] Test database connection before starting development
- [ ] Ensure admin user exists in database (create if missing)
- [ ] For bcryptjs in serverless environments, always use `bcrypt.default.compare()` and `bcrypt.default.hash()`
- [ ] Initialize database schema on first run

### Common bcryptjs Issues
When using dynamic imports with bcryptjs in Astro/Vercel:
```typescript
// ‚ùå WRONG - causes "bcrypt.compare is not a function"
const bcrypt = await import('bcryptjs');
const isValid = await bcrypt.compare(password, hash);

// ‚úÖ CORRECT - use .default
const bcrypt = await import('bcryptjs');
const isValid = await bcrypt.default.compare(password, hash);
```

### Database Connection Patterns
```typescript
// Always use connection pooling for PostgreSQL
const pool = new Pool({
  connectionString: import.meta.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

// Always release connections in finally blocks
const client = await pool.connect();
try {
  // database operations
} finally {
  client.release();
}
```

## Development Server Debugging

### Quick Debugging Steps
1. Check server logs for specific error messages
2. Test API endpoints with curl to isolate issues
3. Verify environment variables are loaded
4. Test database connection independently
5. Add temporary console.log statements for debugging

### Port Management
- Astro dev server may use different ports (4321, 4322, etc.)
- Use `lsof -i :4321` to find active ports
- Always check which port the server is actually running on

## Error Handling Patterns

### API Error Handling Best Practices
- Always include specific error details in development
- Use try-catch with proper error logging
- Return meaningful error messages to frontend
- Log both error message and stack trace for debugging

### Environment Setup Validation
```typescript
// Pre-flight checks for environment variables
const getApiKey = () => {
  const apiKey = import.meta.env.RESEND_API_KEY || process.env.RESEND_API_KEY;
  if (!apiKey) {
    console.error('RESEND_API_KEY is not set in environment variables');
    return null;
  }
  if (!apiKey.startsWith('re_')) {
    console.error('RESEND_API_KEY appears to be invalid (should start with "re_")');
    return null;
  }
  return apiKey;
};
```

## Pre-flight Checks
- [ ] .env file exists and has required variables
- [ ] Database connection string is valid
- [ ] Required npm packages are installed
- [ ] Development server starts without errors
- [ ] API endpoints respond correctly

## Code Patterns & Best Practices

### Form Handling
- Always validate required fields on both client and server
- Use proper TypeScript interfaces for form data
- Implement proper error states and success feedback
- Use FormData API for form submissions

### Email Notifications
- Implement rate limiting for multiple admin emails
- Use proper HTML email templates
- Handle email service failures gracefully
- Log email sending attempts and results

### Database Operations
- Use parameterized queries to prevent SQL injection
- Implement proper error handling for database operations
- Use transactions for related operations
- Always validate data before database operations

## File Structure Conventions
```
src/
‚îú‚îÄ‚îÄ components/     # Reusable UI components
‚îú‚îÄ‚îÄ layouts/       # Page layouts
‚îú‚îÄ‚îÄ lib/          # Database, email, and utility functions
‚îú‚îÄ‚îÄ pages/        # Astro pages and API routes
‚îÇ   ‚îî‚îÄ‚îÄ api/      # API endpoints
‚îî‚îÄ‚îÄ styles/       # Global styles
```

## Environment Variables
Required environment variables:
- `DATABASE_URL`: PostgreSQL connection string
- `RESEND_API_KEY`: Resend email service API key
- `ADMIN_USERNAME`: Admin login username
- `ADMIN_PASSWORD`: Admin login password
- `ADMIN_EMAIL_1-4`: Admin notification email addresses
- `FROM_EMAIL`: Sender email address
- `FROM_NAME`: Sender name
- `SITE_URL`: Full site URL for production

## Deployment Considerations
- All environment variables must be set in Vercel dashboard
- Database must be accessible from Vercel's IP ranges
- Use Vercel's serverless functions for API routes
- Test all functionality in preview deployments

## Common Issues & Solutions

### Database Connection Issues
- Check SSL configuration for production databases
- Verify connection string format
- Test connection with a simple query first

### Email Service Issues
- Verify Resend API key format (starts with 're_')
- Check admin email addresses are valid
- Implement proper error handling for email failures

### Serverless Function Issues
- Keep functions lightweight and fast
- Use proper imports for serverless environments
- Handle cold starts appropriately

## Performance Optimizations
- Use connection pooling for database connections
- Implement proper caching strategies
- Optimize images and assets
- Use Tailwind's purge feature for smaller CSS bundles

## Security Considerations
- Validate all user inputs
- Use parameterized database queries
- Implement proper CORS policies
- Sanitize email content
- Use HTTPS in production

## Development Workflow
1. Run `npm run setup` to initialize project structure
2. Configure `.env` file with your settings
3. Test database connection
4. Run `npm run dev` to start development server
5. Test all API endpoints
6. Deploy to Vercel for testing

## Quick Commands
- `npm run setup` - Initialize project structure
- `npm run dev` - Start development server
- `npm run build` - Build for production
- `npm run preview` - Preview production build

## Template Customization
- Update form fields in `src/lib/database.ts`
- Modify email templates in `src/lib/email.ts`
- Customize styling in `src/components/`
- Add new pages in `src/pages/`
- Update admin interface as needed

Remember: This template is designed for rapid deployment of client landing pages. Keep it simple, focused, and maintainable.
